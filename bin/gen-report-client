#!/bin/bash
set -euo pipefail
set -x

UTOPIA_ROOT=$(git rev-parse --show-toplevel)
. "${UTOPIA_ROOT}/bin/runner"

# Parse arguments
QUICK_MODE=false
TOPIC_SLUG=""

while [[ $# -gt 0 ]]; do
  case $1 in
    --quick)
      QUICK_MODE=true
      shift
      ;;
    *)
      if [[ -z "$TOPIC_SLUG" ]]; then
        TOPIC_SLUG=$1
      else
        echo "Error: Unknown argument $1"
        exit 1
      fi
      shift
      ;;
  esac
done

if [[ -z "$TOPIC_SLUG" ]]; then
  echo "Usage: $0 [--quick] <topic_slug>"
  exit 1
fi

RESEARCH_TOPIC=$(cd bin/nodejs && yarn tsx topic-reader.ts "$TOPIC_SLUG")

LANGGRAPH_SERVER=http://127.0.0.1:2024
shell npx --yes wait-on "${LANGGRAPH_SERVER}/docs" # wait for the server to be ready

# Set research parameters based on quick mode
if [[ "$QUICK_MODE" == "true" ]]; then
  MAX_LOOPS=1
  FETCH_FULL="false"
else
  MAX_LOOPS=4
  FETCH_FULL="true"
fi


# Create assistant using more robust curl with proper JSON handling
ASSIST=$(
curl -s -X POST "$LANGGRAPH_SERVER/assistants" \
  -H 'Content-Type: application/json' \
  -d '{
    "graph_id": "ollama_deep_researcher",
    "name": "deep-research (LMStudio)"
  }' | jq -r '.assistant_id'
)

echo "assistant_id: $ASSIST"

# Use a temporary file for the JSON payload to handle multiline content properly
TEMP_JSON=$(mktemp)
cat > "$TEMP_JSON" <<EOF
{
  "assistant_id": "$ASSIST",
  "input": {
    "research_topic": $(echo "$RESEARCH_TOPIC" | jq -Rs .)
  },
  "config": {
    "configurable": {
      "llm_provider": "lmstudio",
      "lmstudio_base_url": "http://localhost:1234/v1",
      "local_llm": "openai/gpt-oss-20b",
      "max_web_research_loops": $MAX_LOOPS,
      "fetch_full_page": $FETCH_FULL,
      "use_tool_calling": true,
      "search_api": "duckduckgo",
      "strip_thinking_tokens": true
    }
  }
}
EOF

curl -s -X POST "${LANGGRAPH_SERVER}/runs/wait" \
  -H 'Content-Type: application/json' \
  -d "@$TEMP_JSON" | \
  jq -r '.running_summary' > "topics/$TOPIC_SLUG/reports/report.md"

rm "$TEMP_JSON"

echo "Report saved to: topics/$TOPIC_SLUG/reports/report.md"
